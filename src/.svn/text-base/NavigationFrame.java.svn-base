import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextArea;
import javax.swing.JTextField;

@SuppressWarnings("serial")
public class NavigationFrame extends JFrame implements PropertyChangeListener,
		KeyListener, ActionListener {
	private Graph graph;
	private ImagePanel mainPanel;
	private InfoPanel infoPanel;
	private JMenuBar menuBar;
	private ArrayList<Node> nodes = new ArrayList<Node>();
	private JComboBox fromBox = new JComboBox();
	private JComboBox toBox = new JComboBox();
	private JPopupMenu popUp = new JPopupMenu();
	private JTextArea searchBar = new JTextArea("");
	private Point coord;
	private JTextField fromBoxComp;
	private JTextField toBoxComp;
	private HashMap<String, Node> hash;
	public JComboBox searchBox;
	private String heuristicType;
	private NavigationFrame frame = this;

	public NavigationFrame(final Graph graph,
			final HashMap<String, Node> hashTable) {

		hash = hashTable;
		this.graph = graph;
		this.nodes.add(null);
		this.nodes.add(null);
		// this.nodes.add(graph.toArrayList().get(0));
		// this.nodes.add(graph.toArrayList().get(0));
		this.setSize(new Dimension(1045, 570));
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("RHIT Navigation System");
		this.setLayout(new FlowLayout(FlowLayout.LEFT));
		this.setVisible(true);
		this.setIconImage(new ImageIcon("globe_green.png").getImage());
		this.setMinimumSize(new Dimension(1024, 503));
		this.setPreferredSize(new Dimension(1024, 503));
		this.addKeyListener(this);
		mainPanel = new ImagePanel("map.jpg", this);
		infoPanel = new InfoPanel();
		new JLabel();
		new JLabel();
		menuBar = new JMenuBar();
		JMenu fileMenu = new JMenu();
		JMenuItem Open = new JMenuItem();
		JMenuItem Exit = new JMenuItem();
		JMenu ViewMenu = new JMenu();
		JRadioButtonMenuItem radioButtonMapView = new JRadioButtonMenuItem();
		JRadioButtonMenuItem radioButtonSatiliteView = new JRadioButtonMenuItem();
		JMenuItem displayTopAttr = new JMenuItem("Top Attractions");
		ViewMenu.add(displayTopAttr);

		displayTopAttr.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ArrayList<Attractions> temp = frame.displayTopAttr();
				infoPanel.hide();
				infoPanel.getDirections().setVisible(true);
				String tempStr = "";
				for (int count = 0; count < temp.size(); count++) {
					tempStr = tempStr
							+ temp.get(temp.size() - count - 1).name
							+ "\n                                                 Rating: "
							+ temp.get(temp.size() - count - 1).getRating()
							+ "\n";
				}
				infoPanel.getDirections().setText(tempStr);
			}
		});

		JMenuItem popupInsert = new JMenuItem("Insert Destination");
		popupInsert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				NewObjectFrame frame = new NewObjectFrame(
						NewObjectFrame.frameType.Node, null,
						(int) coord.getX(), (int) coord.getY(), graph,
						hashTable, NavigationFrame.this.frame);
			}
		});
		popUp.add(popupInsert);

		JMenuItem popupDelete = new JMenuItem("Remove Destination");
		popupDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ArrayList<Neighbor> temp = infoPanel.getSelectedNode()
						.getNeighbors();
				for (Neighbor T : temp) {
					T.getNode().removeNeighbor(infoPanel.getSelectedNode());
				}
				graph.remove(infoPanel.getSelectedNode());
				hashTable
						.remove(infoPanel.getSelectedNode().name.toLowerCase());
				nearestNode(coord);
				mainPanel.clearRoute();
			}
		});
		popUp.add(popupDelete);

		JMenuItem popupClear = new JMenuItem("Clear Route");
		popupClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mainPanel.clearRoute();
			}
		});
		popUp.add(popupClear);

		mainPanel.setMaximumSize(new Dimension(1024, 503));

		fileMenu.setText("File");
		this.menuBar.setVisible(true);
		Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_N,
				InputEvent.CTRL_MASK));
		Open.setText("Add Location");
		fileMenu.add(Open);

		Open.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});

		Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_Q,
				InputEvent.CTRL_MASK));
		Exit.addActionListener(this);
		Exit.setText("Exit");
		fileMenu.add(Exit);

		Exit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});

		menuBar.add(fileMenu);

		ViewMenu.setText("View");

		radioButtonMapView.setSelected(true);
		radioButtonMapView.setText("Map");
		radioButtonMapView.addActionListener((new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				NavigationFrame.this.mainPanel.setImage("map.jpg");
				NavigationFrame.this.mainPanel.repaint();
			}

		}));
		ViewMenu.add(radioButtonMapView);

		radioButtonSatiliteView.setSelected(false);
		radioButtonSatiliteView.setText("Satilite");
		radioButtonSatiliteView.addActionListener((new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				NavigationFrame.this.mainPanel.setImage("Satilite.jpg");
				NavigationFrame.this.mainPanel.repaint();
			}

		}));
		ViewMenu.add(radioButtonSatiliteView);

		ButtonGroup mapView = new ButtonGroup();
		mapView.add(radioButtonMapView);
		mapView.add(radioButtonSatiliteView);

		menuBar.add(ViewMenu);
		JLabel toLabel = new JLabel();
		toLabel.setText("  To:  ");
		menuBar.add(toLabel);
		toBox.addItem(null);

		for (int x = 0; x < this.graph.toArrayList().size(); x++) {
			toBox.addItem(this.graph.toArrayList().get(x));
		}
		toBox.setEditable(true);
		toBox.setMaximumSize(new Dimension(250, 20));

		toBoxComp = (JTextField) toBox.getEditor().getEditorComponent();
		toBoxComp.addKeyListener(new KeyListener() {
			Node temp;

			@Override
			public void keyPressed(KeyEvent arg0) {
				if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
					temp = search(NavigationFrame.this.toBoxComp.getText());
					if (temp != null) {
						NavigationFrame.this.infoPanel.changeNode(temp);
						NavigationFrame.this.toBox.setSelectedItem(temp);
					}
				}

			}

			@Override
			public void keyReleased(KeyEvent e) {
				// Auto-generated method stub

			}

			@Override
			public void keyTyped(KeyEvent e) {
				// Auto-generated method stub

			}
		});

		toBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (Node.class.isInstance(NavigationFrame.this.fromBox
						.getSelectedItem())) {
					NavigationFrame.this.nodes.set(1,
							(Node) NavigationFrame.this.fromBox
									.getSelectedItem());
				}
				if (Node.class.isInstance(NavigationFrame.this.toBox
						.getSelectedItem())) {
					NavigationFrame.this.nodes
							.set(0, (Node) NavigationFrame.this.toBox
									.getSelectedItem());
				}
			}

		});
		this.menuBar.add(toBox);
		JLabel fromLabel = new JLabel();
		fromLabel.setText("  From:  ");
		menuBar.add(fromLabel);

		this.fromBox = new JComboBox();
		fromBox.getEditor().getEditorComponent();
		fromBoxComp = (JTextField) fromBox.getEditor().getEditorComponent();
		fromBoxComp.addKeyListener(new KeyListener() {
			Node temp;

			@Override
			public void keyPressed(KeyEvent arg0) {
				if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
					temp = search(NavigationFrame.this.fromBoxComp.getText());
					NavigationFrame.this.infoPanel.changeNode(temp);
					if (temp != null) {
						NavigationFrame.this.fromBox.setSelectedItem(temp);
					}
				}

			}

			@Override
			public void keyReleased(KeyEvent e) {

			}

			@Override
			public void keyTyped(KeyEvent e) {

			}
		});
		fromBox.addItem(null);
		for (int x = 0; x < this.graph.toArrayList().size(); x++) {
			fromBox.addItem(this.graph.toArrayList().get(x));
		}
		fromBox.setEditable(true);
		fromBox.setMaximumSize(new Dimension(250, 20));
		fromBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				NavigationFrame.this.nodes.set(1,
						(Node) NavigationFrame.this.fromBox.getSelectedItem());
				NavigationFrame.this.nodes.set(0,
						(Node) NavigationFrame.this.toBox.getSelectedItem());
			}

		});
		this.menuBar.add(fromBox);

		JLabel searchLabel = new JLabel();
		searchLabel.setText("  Navigation Method:  ");
		menuBar.add(searchLabel);

		searchBox = new JComboBox();
		searchBox.addItem("Shortest Distance");
		searchBox.addItem("Least Time");
		searchBox.addItem("Most Girls");
		searchBox.setEditable(false);
		searchBox.setMaximumSize(new Dimension(175, 20));
		searchBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(searchBox.getSelectedIndex()==0) heuristicType = "Least Distance";
				else if(searchBox.getSelectedIndex()==1) heuristicType = "Least Time";
				else heuristicType  = "Most Girls";
			}

		});
		this.menuBar.add(searchBox);
		searchBar.setVisible(true);
		searchBar.setAlignmentX(RIGHT_ALIGNMENT);
		this.menuBar.add(searchBar);

		JButton searchButton = new JButton("Navigate");
		this.menuBar.add(searchButton);
		searchButton.addActionListener((new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (NavigationFrame.this.nodes.get(0) != null
						&& NavigationFrame.this.nodes.get(1) != null)
					NavigationFrame.this.setArray(NavigationFrame.this.nodes);
			}
		}));

		this.mainPanel.setPreferredSize(new Dimension(800, 503));
		this.infoPanel.setPreferredSize(new Dimension(224, 503));
		this.infoPanel.setBackground(Color.WHITE);

		this.add(this.menuBar);
		this.add(mainPanel);
		this.add(this.infoPanel);
	}

	public Node search(String string) {
		return hash.get(string.toLowerCase());
	}

	public JPopupMenu getPopUp() {
		return popUp;
	}

	public void setPopUp(JPopupMenu popUp) {
		this.popUp = popUp;
	}

	public void setArray(ArrayList<Node> nodes) {
		this.nodes = nodes;
		AStar astar = new AStar(nodes.get(nodes.size() - 2), nodes.get(nodes
				.size() - 1), graph, this.heuristicType);
		// ArrayList<Node> tempArray = astar.search(nodes.get(0),
		// nodes.get(nodes.size()-1));
		ArrayList<Node> tempArray = astar.search();
		if (!(tempArray == null)) {
			this.infoPanel.setDirections(tempArray);
			mainPanel.setArray(tempArray);
		}
		mainPanel.repaint();
		mainPanel.setDrawn();
	}

	public ArrayList<Attractions> displayTopAttr() {
		ArrayList<Attractions> RAWR = new ArrayList<Attractions>();
		double min = 0.0;
		Attractions smallAttr = null;
		for (Node K : graph.getListOfNodes()) {
			for (Attractions T : K.getAttractions()) {
				if (RAWR.size() < 10) {
					RAWR.add(T);
				} else {
					for (Attractions F : RAWR) {
						if (F.getRating() < min) {
							min = F.getRating();
							smallAttr = F;
						}
					}
					if (T.getRating() > min) {
						RAWR.remove(smallAttr);
						RAWR.add(T);
					}
				}
			}
		}
		return RAWR;
	}

	public void nearestNode(Point clicked) {
		Node nearestNode = new TESTNode(), node1;
		double smallestDistance = 999999999;
		int x = 0;
		double tempDist;
		if (graph == null || graph.getListOfNodes() == null) {
			return;
		}
		ArrayList<Node> temp = graph.getListOfNodes();
		while (x < temp.size()) {
			node1 = temp.get(x);
			tempDist = Math.sqrt((node1.getPoint().getX() - clicked.getX())
					* (node1.getPoint().getX() - clicked.getX())
					+ (node1.getPoint().getY() - clicked.getY())
					* (node1.getPoint().getY() - clicked.getY()));
			if (tempDist < smallestDistance && tempDist < 50) {
				smallestDistance = tempDist;
				nearestNode = node1;
			}
			x++;
		}
		this.infoPanel.changeNode(nearestNode);
	}

	public ArrayList<Node> getArrayOfNodes() {
		return graph.toArrayList();
	}

	public void addToArray(Node node) {
		this.nodes.add(node);
	}

	public Node getSelectedNode() {
		return this.infoPanel.getSelectedNode();
	}

	public void resetInfoPanel() {
		this.infoPanel.changeNode(new TESTNode());
		this.infoPanel.show();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// 
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// 
	}

	@Override
	public void propertyChange(PropertyChangeEvent arg0) {
		//
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		//
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		//
	}

	public void setCoord(Point point) {
		coord = point;
	}

	public void updateLists() {
		this.toBox.removeAllItems();
		toBox.addItem(null);
		for (int x = 0; x < this.graph.toArrayList().size(); x++) {
			toBox.addItem(this.graph.toArrayList().get(x));
		}
		this.fromBox.removeAllItems();
		fromBox.addItem(null);
		for (int x = 0; x < this.graph.toArrayList().size(); x++) {
			fromBox.addItem(this.graph.toArrayList().get(x));
		}
	}
	// SVN SUCKS

}