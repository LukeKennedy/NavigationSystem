import java.util.ArrayList;
import java.util.Queue;

public class AStar {
	ArrayList<Node> openSet = new ArrayList<Node>();
	ArrayList<Node> closedSet = new ArrayList<Node>();
	Node startNode;
	Node endNode;
	Graph map;
	String heuristicType;

	public AStar(Node startNode, Node endNode, Graph map, String heuristic) {
		this.startNode = startNode;
		this.heuristicType = heuristic;
		this.endNode = endNode;
		for (int temp = 0; temp < map.getListOfNodes().size(); temp++) {
			map.getListOfNodes().get(temp).pathParent = null;
		}
		this.map = map;
	}

	public ArrayList<Node> search() {
		return search(this.startNode, this.endNode);
	}

	public ArrayList<Node> search(Node startNode, Node goalNode) {
<<<<<<< .mine
		PriorityQueue<Node> queue = new PriorityQueue<Node>();
=======
		// INITIALIZE ALL VARIABLES
		System.out.println("START NODE IS = " + startNode.name
				+ " AND GOAL NODE IS = " + goalNode.name + "\n");
		ArrayList<Node> openList = new ArrayList<Node>();
>>>>>>> .r203
		ArrayList<Node> closedList = new ArrayList<Node>();
<<<<<<< .mine
		ArrayList<Node> path = new ArrayList<Node>();

		startNode.pathParent = null;
		Node current = startNode;
		Double totalDistance = 0.0;

		while (!current.equals(endNode)) {
			for (Node n : current.getNeighborNodes()) {
				if (!closedList.contains(n)) {
					if (!queue.contains(n)) {
						n.pathParent = current;
						n.setCost(n.distance(current) + n.distance(goalNode));
						queue.add(n);
=======
		ArrayList<Node> shortestPath = null;
		ArrayList<Node> lastPath = new ArrayList<Node>();
		Double shortestDist = 99999999999.9;
		Double totalDist =0.0;
		Boolean isFirstTime = true;
		openList.add(startNode);
		Node currentNode = startNode;
		startNode.pathParent = null;

		// CONTINUES TO SEARCH FOR PATH SO LONG AS THERE ARE UNVISITED NODES
		while(currentNode != startNode || isFirstTime){
			if(!isFirstTime){
			if(!lastPath.isEmpty()){
				System.out.println("LAST PATH WAS NOT EMPTY. CALCULATING DISTANCE...");
				for(int k = 0; k<lastPath.size()-1;k++){
				totalDist = totalDist + lastPath.get(k).distance(lastPath.get(k+1));
				}
				if(totalDist<shortestDist){
					System.out.println("LAST PATH WAS SHORTER SETTING TO SHORTEST PATH");
					shortestPath = lastPath;
					shortestDist = totalDist;
				}
			}
			openList.clear();
			openList.add(currentNode.pathParent);
			closedList.remove(currentNode.pathParent);
			for(int j = 0; j<currentNode.pathParent.getNeighbors().size();j++){
				openList.add(currentNode.pathParent.getNeighbors().get(j).getNode());
				openList.remove(currentNode.pathParent.getNeighbors().get(j).getNode());
			}
			openList.remove(currentNode);
			closedList.add(currentNode);
			System.out.println("RECURSING BACK FROM NULL PATH OR DESTINATION...");
			}
			isFirstTime = false;
		while (!openList.isEmpty()) {
			startNode.pathParent = null;
			System.out.println("STARTING LOOP CURRENT NODE = "
					+ openList.get(0).name);
			// SETS CURRENT NODE TO LAST FOUND LOWEST COST NODE AND CLEARS THE
			// OPEN LIST
			currentNode = openList.remove(0);
			// RETURNS PATH IF GOAL IS REACHED
			if (currentNode.equals(goalNode)) {
				System.out.println("FOUND GOAL NODE...ATTEMPTING RETRACE");
				lastPath = reconstructPath(currentNode);
				break;
				// CONTINUES SEARCH.....
			} else {
				if (!closedList.contains(currentNode)) {
					closedList.add(currentNode);
					// ADD ALL NEIGHBORS TO OPEN LIST IF NOT IN CLOSED LIST
					System.out
							.println("ADDING ALL OPEN NEIGHBORS TO OPEN LIST");
					for (Neighbor K : currentNode.getNeighbors()) {
						if (!(closedList.contains(K))) {
							openList.add(K.getNode());
						}
>>>>>>> .r203
					}
<<<<<<< .mine
					 else {
						double oldCost = n.getCost();
						if (n.getCost() < oldCost) {
							n.pathParent = current;
							queue.remove(n);
							n.setCost(n.distance(current) + n.distance(goalNode));
							queue.add(n);
						}
=======
					// SET ALL OPEN NEIGHBOR'S PATH PARENTS TO CURRENT NODE AND
					// FINDS CHEAPEST OF ALL NEIGHBORS
					Node Cheap = null;
					double lowestCost = 999999.999;
					double cost;
					for (Node F : openList) {
						if (!(closedList.contains(F))) {
							System.out.println("SETTING PARENT PATH");
							F.pathParent = currentNode;
							if (F.equals(goalNode)) {
								System.out
										.println("FOUND GOAL NODE...ATTEMPTING RETRACE");
								return reconstructPath(F);
							}
							cost = F.distance(currentNode)
									+ F.distance(goalNode);
							System.out.println("I AM NODE " + F.name);
							if (cost < lowestCost) {
								Cheap = F;
								lowestCost = cost;
								System.out.println("I WAS CHEAPER WITH COST = "
										+ lowestCost);
							}
						}
						// ADDS ALL NEIGHBORS TO CLOSED LIST
						// if (!(closedList.contains(F))) {
						// closedList.add(F);
						// System.out.println("ADDED " + F.name
						// + " TO CLOSED LIST\n");
						// }
>>>>>>> .r203
					}
<<<<<<< .mine
=======
					for (Node F : openList) {
						// ADDS ALL NEIGHBORS TO CLOSED LIST
						if (!(closedList.contains(F)) && !(F.equals(Cheap))) {
							closedList.add(F);
							System.out.println("ADDED " + F.name
									+ " TO CLOSED LIST\n");
						}
					}
>>>>>>> .r203
					// closedList.add(currentNode);
					System.out.println("The closed list contains "
							+ closedList.toString());
					// SETS CURRENT NODE TO THE MOST RECENT CHEAP NEIGHBOR AND
					// CLEARS OPEN LIST, THEN ADDS NEWEST CURRENT NODE TO OPEN
					// LIST
					currentNode = Cheap;
					openList.clear();
					openList.add(currentNode);
				}
<<<<<<< .mine
=======
				System.out.println("PREPARED FOR NEXT LOOP....");
>>>>>>> .r203
			}
			System.out.println(queue.toString());
			closedList.add(current);
			current = queue.poll();
			if (current == null) {
				return null;
			}
		}
<<<<<<< .mine
		return this.reconstructPath(current);
=======
		// IF WHILE FAILS THEN PATH IS NOT POSSIBLE AND RETURN NULL
		System.out.println("NO PATH FOUND  :( \n");
		// System.out.println("....PROBABLY GUNNA CRASH IN A SECOND HERE....");
		}
		return shortestPath;
>>>>>>> .r203
	}

	protected ArrayList<Node> reconstructPath(Node node) {
		ArrayList<Node> path = new ArrayList<Node>();
		while (node.pathParent != null) {
			path.add(node);
			node = node.pathParent;

		}
		path.add(node);
		return path;
	}

	public void setHeuristic(String string) {
		this.heuristicType = string;
	}
}
