import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;

/**
 * @author Luke Kennedy. Created May 14, 2010.
 */
@SuppressWarnings("serial")
public class InfoPanel extends JPanel implements ActionListener
{
	private Node selectedNode;
	private JTextArea nameLabel = new JTextArea(
			"Rose-Hulman Institute of Technology");
	private ImageIcon nodePic = new ImageIcon("RHITDefault.jpg");
	private JLabel pictureLabel = new JLabel(nodePic, SwingConstants.LEFT);
	private JTextArea desLabel = new JTextArea(
			"Rose–Hulman Institute of Technology is a small, private, non-sectarian college specializing in teaching engineering, mathematics, and science. ");
	private JComboBox attractionBox = new JComboBox();
	private JTextArea attNameLabel = new JTextArea();
	private JTextArea attDesLabel = new JTextArea();
	private JTextArea ratingLabel = new JTextArea();
	private ArrayList<Attractions> attractionList;
	private JButton ratingButton = new JButton("Set Rating");
	String[] ratings = { "1", "2", "3", "4", "5" };
	private JComboBox ratingBox = new JComboBox(ratings);
	private JTextArea directions = new JTextArea();

	public JTextArea getDirections() {
		return directions;
	}

	public void setDirections(JTextArea directions) {
		this.directions = directions;
	}

	public InfoPanel() {
		this.nameLabel.setFont(new Font("Serif", Font.BOLD, 13));
		this.pictureLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
		this.nameLabel.setEditable(false);
		this.desLabel.setEditable(false);
		this.attNameLabel.setEditable(false);
		this.attDesLabel.setEditable(false);
		this.ratingLabel.setEditable(false);
		this.directions.setEditable(false);
		this.desLabel.setRows(5);
		this.desLabel.setLineWrap(true);
		this.desLabel.setWrapStyleWord(true);
		this.attDesLabel.setSize(220, 300);
		this.attDesLabel.setRows(5);
		this.attDesLabel.setLineWrap(true);
		this.attDesLabel.setWrapStyleWord(true);
		this.attractionBox.setVisible(false);
		this.directions.setVisible(false);
		this.ratingBox.setVisible(false);
		this.ratingButton.setVisible(false);
		// TEST CODE
		// this.selectedNode = new TESTNode();
		//
		// this.selectedNode.addAttraction(new Attractions("Speed Beach",
		// "A beach area on Speed Lake near Percopo Hall."));
		// this.selectedNode
		// .addAttraction(new Attractions(
		// "Eric Hayes' Apartment",
		// "Eric Hayes, the God of Rose, lives within the Resident Director apartment on Speed 1 with his wife and two children. Hayes is awesome, and therefore his apartment is an extension of awesome."));
		//
		// this.attractionBox = new JComboBox(this.selectedNode.getAttractions()
		// .toArray());
		// this.attractionList = this.selectedNode.getAttractions();
		// this.attractionBox = new JComboBox(this.attractionList.toArray());
		// this.attractionBox.addActionListener(this);
		// END TEST CODE
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.add(nameLabel);
		JPanel holder = new JPanel();
		holder.setBackground(Color.white);
		holder.add(this.pictureLabel);
		holder.setLayout(new FlowLayout(FlowLayout.LEFT));
		this.add(holder);
		this.add(this.desLabel);
		this.add(this.attractionBox);
		this.add(this.attNameLabel);
		this.add(this.ratingLabel);
		this.add(this.attDesLabel);
		this.add(this.directions);
		this.add(ratingBox);
		this.add(ratingButton);
		ratingButton.addActionListener((new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				updateRating();
			}
		}));
	}

	private void updateRating()
	{
		getSelectedAttraction().addRating(ratingBox.getSelectedIndex() + 1.0);
		this.updateAttractions(this.attractionBox.getSelectedIndex() - 1);
	}

	public void changeNode(Node newNode)
	{
		this.selectedNode = newNode;
		this.update();
	}

	public Node getSelectedNode()
	{
		return selectedNode;
	}

	private void update()
	{
		this.nameLabel.setText(this.selectedNode.getName());
		this.desLabel.setText(this.selectedNode.getDescription());
		this.nodePic = new ImageIcon(this.selectedNode.getImage());
		this.pictureLabel.setIcon(this.nodePic);
		this.attNameLabel.setText("");
		this.ratingLabel.setText("");
		this.attDesLabel.setText("");
		attractionList = this.selectedNode.getAttractions();
		this.attractionBox.removeAllItems();
		this.attractionBox.addItem(null);
		for (int x = 0; x < this.attractionList.size(); x++)
		{
			this.attractionBox.addItem(this.attractionList.get(x));
		}
		this.attractionBox.addActionListener(this);
		// System.out.println(this.attractionList.size());
		if (this.attractionList.size() <= 0)
		{
			this.attractionBox.setVisible(false);
			ratingBox.setVisible(false);
			ratingButton.setVisible(false);
		} else
		{
			this.attractionBox.setVisible(true);
			ratingBox.setVisible(true);
			ratingButton.setVisible(true);
			this.updateAttractions(-1);
		}
	}

	public void updateAttractions(int index)
	{
		this.attNameLabel.setText("");
		this.ratingLabel.setText("");
		this.attDesLabel.setText("");
		this.ratingBox.setVisible(false);
		this.ratingButton.setVisible(false);
		if (!(index < 0))
		{
			this.ratingBox.setVisible(true);
			this.ratingButton.setVisible(true);
			this.attNameLabel.setVisible(true);
			this.ratingLabel.setVisible(true);
			this.attDesLabel.setVisible(true);
			this.attNameLabel.setText(this.attractionList.get(index).getName());
			DecimalFormat twoPlaces = new DecimalFormat("0.00");
			this.ratingLabel.setText("Rating: "
					+ twoPlaces.format(this.attractionList.get(index).getRating()));
			this.attDesLabel.setText(this.attractionList.get(index)
					.getDescription());
		}
	}

	public Attractions getSelectedAttraction()
	{
		if (this.attractionList == null)
			return null;
		return this.attractionList
				.get(this.attractionBox.getSelectedIndex() - 1);
	}

	public void hide()
	{
		this.directions.setVisible(true);
		this.selectedNode = new TESTNode();
		this.nameLabel.setVisible(false);
		this.pictureLabel.setVisible(false);
		this.desLabel.setVisible(false);
		this.attractionBox.setVisible(false);
		this.attNameLabel.setVisible(false);
		this.attDesLabel.setVisible(false);
		this.ratingLabel.setVisible(false);
		this.ratingBox.setVisible(false);
		this.ratingButton.setVisible(false);
	}

	public void show()
	{
		this.directions.setVisible(false);
		this.nameLabel.setVisible(true);
		this.pictureLabel.setVisible(true);
		this.desLabel.setVisible(true);
		this.attractionBox.setVisible(false);
		this.attNameLabel.setVisible(true);
		this.attDesLabel.setVisible(true);
		this.ratingLabel.setVisible(true);
		this.ratingBox.setVisible(false);
		this.ratingButton.setVisible(false);
	}

	public void setDirections(ArrayList<Node> temp)
	{
		this.hide();
		this.directions.setVisible(true);
		String tempStr = "";
		for (int count = 0; count < temp.size(); count++)
		{
			tempStr = tempStr + temp.get(temp.size() - count - 1).name + "\n";
		}
		this.directions.setText(tempStr);
	}

	@Override
	public void actionPerformed(ActionEvent e)
	{
		if (e.getSource() == this.attractionBox)
		{
			this.updateAttractions(this.attractionBox.getSelectedIndex() - 1);
		}
	}
}
